# Main function to setup the navigation and page layout
#LOOK AT THIS CODE AND DELETE WHEN COMPLETE
def main():
    st.sidebar.title("Sports Analytics Dashboard")
    choice = st.sidebar.radio("Navigate", ["Players", "Injuries", "Bets"])
    
    if choice == "Players":
        display_players()
    elif choice == "Injuries":
        display_injuries()
    elif choice == "Bets":
        display_bets()

def display_players():
    st.write("Player Rosters Across All Leagues")
    # Example call to display rosters for all leagues, you might need to adjust this based on your actual data setup
    for league, teams in team_urls.items():
        for team, url in teams.items():
            if league == 'NFL':
                display_nfl_roster(team)
            elif league == 'MLB':
                display_mlb_roster(team)
            elif league == 'NBA':
                display_nba_roster(team)
            elif league == 'NHL':
                display_nhl_roster(team)
# General function to load data and handle errors
def load_data(url):
    try:
        return pd.read_csv(url)
    except Exception as e:
        st.error(f"Failed to load data: {e}")
        return pd.DataFrame()

# Display NFL team roster
def display_nfl_roster(team):
    roster_df = load_data(nfl_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NFL):")
        for _, row in roster_df.iterrows():
            with st.container():
                cols = st.columns([1, 2, 1, 1, 1])
                cols[0].write(row['Team Name'])
                with cols[1].expander(f"{row['Player Name']} - More Details"):
                    details = {col: row[col] for col in ['Player Number', 'Position', 'Height', 'Weight', 'Age', 'Years of Experience', 'Fanspo Agent', 'Fanspo Agency', 'Spotrac Agent', 'Spotrac Agency'] if col in roster_df.columns}
                    st.write(details)
                with cols[2].expander("Career Health Details"):
                    st.write("Career health data to be added.")
                with cols[3].expander("Season Health Details"):
                    st.write("Season health data to be added.")
                cols[4].write(row['Percent of Reinjury'])

# Display MLB team roster
def display_mlb_roster(team):
    roster_df = load_data(mlb_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (MLB):")
        for _, row in roster_df.iterrows():
            with st.container():
                cols = st.columns([1, 2, 1, 1, 1])
                cols[0].write(row['Team Name'])
                with cols[1].expander(f"{row['First Name']} {row['Last Name']} - More Details"):
                    details = {col: row[col] for col in ['Player Number', 'Position', 'B/T', 'Ht', 'Wt', 'Status', 'Base Salary', 'Spotrac Agent', 'Spotrac Agency'] if col in roster_df.columns}
                    st.write(details)
                with cols[2].expander("Career Health Details"):
                    st.write("Career health data to be added.")
                with cols[3].expander("Season Health Details"):
                    st.write("Season health data to be added.")
                cols[4].write(row['Percent of Reinjury'])

# Display NBA team roster
def display_nba_roster(team):
    roster_df = load_data(nba_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NBA):")
        for _, row in roster_df.iterrows():
            with st.container():
                cols = st.columns([1, 2, 1, 1, 1])
                cols[0].write(row['TEAM'])
                with cols[1].expander(f"{row['PLAYER']} - More Details"):
                    details = {col: row[col] for col in ['NUMBER', 'POSITION', 'HEIGHT', 'WEIGHT', 'Years of Experience', 'Fanspo Agent', 'Fanspo Agency', 'Spotrac Agent', 'Spotrac Agency'] if col in roster_df.columns}
                    st.write(details)
                with cols[2].expander("Career Health Details"):
                    st.write("Career health data to be added.")
                with cols[3].expander("Season Health Details"):
                    st.write("Season health data to be added.")
                cols[4].write(row['Percent of Reinjury'])

# Display NHL team roster
def display_nhl_roster(team):
    roster_df = load_data(nhl_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NHL):")
        for _, row in roster_df.iterrows():
            with st.container():
                cols = st.columns([1, 2, 1, 1, 1])
                cols[0].write(row['Team'])
                with cols[1].expander(f"{row['Player Name']} - More Details"):
                    details = {col: row[col] for col in ['Position', 'Years of Experience', 'Puckpedia Agent', 'Puckpedia Agency'] if col in roster_df.columns}
                    st.write(details)
                with cols[2].expander("Career Health Details"):
                    st.write("Career health data to be added.")
                with cols[3].expander("Season Health Details"):
                    st.write("Season health data to be added.")
                cols[4].write(row['Percent of Reinjury'])

# Sidebar interaction to select league and team
league_choice = st.sidebar.selectbox('Select a League', ['Select a League', 'NFL', 'MLB', 'NBA', 'NHL'])

if league_choice != 'Select a League':
    team_urls = {
        'NFL': nfl_team_roster_urls,
        'MLB': mlb_team_roster_urls,
        'NBA': nba_team_roster_urls,
        'NHL': nhl_team_roster_urls
    }
    team_choice = st.sidebar.selectbox('Select a Team', ['Select a Team'] + list(team_urls[league_choice].keys()))

    if team_choice != 'Select a Team':
        if league_choice == 'NFL':
            display_nfl_roster(team_choice)
        elif league_choice == 'MLB':
            display_mlb_roster(team_choice)
        elif league_choice == 'NBA':
            display_nba_roster(team_choice)
        elif league_choice == 'NHL':
            display_nhl_roster(team_choice)
