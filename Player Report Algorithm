# Main function to setup the navigation and page layout
#LOOK AT THIS CODE AND DELETE WHEN COMPLETE
def main():
    st.sidebar.title("Sports Analytics Dashboard")
    choice = st.sidebar.radio("Navigate", ["Players", "Injuries", "Bets"])
    
    if choice == "Players":
        display_players()
    elif choice == "Injuries":
        display_injuries()
    elif choice == "Bets":
        display_bets()

def display_players():
    st.write("Player Rosters Across All Leagues")
    # Example call to display rosters for all leagues, you might need to adjust this based on your actual data setup
    for league, teams in team_urls.items():
        for team, url in teams.items():
            if league == 'NFL':
                display_nfl_roster(team)
            elif league == 'MLB':
                display_mlb_roster(team)
            elif league == 'NBA':
                display_nba_roster(team)
            elif league == 'NHL':
                display_nhl_roster(team)
# General function to load data and handle errors
def load_data(url):
    try:
        return pd.read_csv(url)
    except Exception as e:
        st.error(f"Failed to load data: {e}")
        return pd.DataFrame()

# Function to display NFL team roster with health details and expanders for further information
def display_nfl_roster(team):
    roster_df = load_data(nfl_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NFL):")
        for _, row in roster_df.iterrows():
            # Main container for each player
            with st.container():
                st.markdown(f"**{row.get('Player Name', 'N/A')}** - {row.get('Team Name', 'N/A')}")
                # Create columns for different expanders
                col1, col2, col3, col4 = st.columns(4)

                with col1.expander("Player Details"):
                    st.write(f"**Number:** {row.get('Player Number', 'N/A')}")
                    st.write(f"**Position:** {row.get('Position', 'N/A')}")
                    st.write(f"**Height:** {row.get('Height', 'N/A')}")
                    st.write(f"**Weight:** {row.get('Weight', 'N/A')}")
                    st.write(f"**Age:** {row.get('Age', 'N/A')}")
                    st.write(f"**Years of Experience:** {row.get('Years of Experience', 'N/A')}")
                    st.write(f"**Fanspo Agency:** {row.get('Fanspo Agency', 'N/A')}")
                    st.write(f"**Spotrac Agency:** {row.get('Spotrac Agency', 'N/A')}")

                with col2.expander("Career Health Details"):
                    st.write(f"**Career Health Index:** {row.get('Career Health', 'N/A')}")
                    # Detailed data about career health
                    st.write("Detailed career health injuries and analysis.")  # Placeholder for actual data

                with col3.expander("Seasonal Health Details"):
                    st.write(f"**Seasonal Health Index:** {row.get('Seasonal Health', 'N/A')}")
                    # Detailed data about seasonal health
                    st.write("Detailed seasonal health injuries and analysis.")  # Placeholder for actual data

                with col4.expander("Percent of Reinjury"):
                    st.write(f"**Percent of Reinjury:** {row.get('Percent of Reinjury', 'N/A')}")
                    # Detailed data about reinjury percentage
                    st.write("Analysis on likelihood of reinjury.")  # Placeholder for actual data

# Display MLB team roster with health details and expanders for further information
def display_mlb_roster(team):
    roster_df = load_data(mlb_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (MLB):")
        for _, row in roster_df.iterrows():
            # Main container for each player
            with st.container():
                st.markdown(f"**{row.get('First Name', 'N/A')} {row.get('Last Name', 'N/A')}** - {row.get('Team Name', 'N/A')}")
                # Create columns for different expanders
                col1, col2, col3, col4 = st.columns(4)

                with col1.expander("Player Details"):
                    st.write(f"**Number:** {row.get('Player Number', 'N/A')}")
                    st.write(f"**Position:** {row.get('Position', 'N/A')}")
                    st.write(f"**Bat/Throw:** {row.get('B/T', 'N/A')}")
                    st.write(f"**Height:** {row.get('Ht', 'N/A')}")
                    st.write(f"**Weight:** {row.get('Wt', 'N/A')}")
                    st.write(f"**Status:** {row.get('Status', 'N/A')}")
                    st.write(f"**Base Salary:** {row.get('Base Salary', 'N/A')}")
                    st.write(f"**Spotrac Agent:** {row.get('Spotrac Agent', 'N/A')}")

                with col2.expander("Career Health Details"):
                    st.write(f"**Career Health Index:** {row.get('Career Health', 'N/A')}")
                    # Detailed data about career health
                    st.write("Detailed career health injuries and analysis.")  # Placeholder for actual data

                with col3.expander("Seasonal Health Details"):
                    st.write(f"**Seasonal Health Index:** {row.get('Seasonal Health', 'N/A')}")
                    # Detailed data about seasonal health
                    st.write("Detailed seasonal health injuries and analysis.")  # Placeholder for actual data

                with col4.expander("Percent of Reinjury"):
                    st.write(f"**Percent of Reinjury:** {row.get('Percent of Reinjury', 'N/A')}")
                    # Detailed data about reinjury percentage
                    st.write("Analysis on likelihood of reinjury.")  # Placeholder for actual data

# Display NBA team roster with health details and expanders for further information
def display_nba_roster(team):
    roster_df = load_data(nba_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NBA):")
        for _, row in roster_df.iterrows():
            # Main container for each player
            with st.container():
                st.markdown(f"**{row.get('PLAYER', 'N/A')}** - {row.get('TEAM', 'N/A')}")
                # Create columns for different expanders
                col1, col2, col3, col4 = st.columns(4)

                with col1.expander("Player Details"):
                    st.write(f"**Number:** {row.get('NUMBER', 'N/A')}")
                    st.write(f"**Position:** {row.get('POSITION', 'N/A')}")
                    st.write(f"**Height:** {row.get('HEIGHT', 'N/A')}")
                    st.write(f"**Weight:** {row.get('WEIGHT', 'N/A')}")
                    st.write(f"**Years of Experience:** {row.get('Years of Experience', 'N/A')}")
                    st.write(f"**Agent:** {row.get('Fanspo Agent', 'N/A')}, {row.get('Spotrac Agent', 'N/A')}")

                with col2.expander("Career Health Details"):
                    st.write(f"**Career Health Index:** {row.get('Career Health', 'N/A')}")
                    # Placeholder for detailed data about career health
                    st.write("Detailed career health injuries and analysis.")

                with col3.expander("Seasonal Health Details"):
                    st.write(f"**Seasonal Health Index:** {row.get('Seasonal Health', 'N/A')}")
                    # Placeholder for detailed data about seasonal health
                    st.write("Detailed seasonal health injuries and analysis.")

                with col4.expander("Percent of Reinjury"):
                    st.write(f"**Percent of Reinjury:** {row.get('Percent of Reinjury', 'N/A')}")
                    # Placeholder for detailed data about reinjury probability
                    st.write("Analysis on likelihood of reinjury.")

# Display NHL team roster with health details and expanders for further information
def display_nhl_roster(team):
    roster_df = load_data(nhl_team_roster_urls[team])
    if not roster_df.empty:
        st.write(f"Roster for {team} (NHL):")
        for _, row in roster_df.iterrows():
            # Main container for each player
            with st.container():
                st.markdown(f"**{row.get('Player Name', 'N/A')}** - {row.get('Team', 'N/A')}")
                # Create columns for different expanders
                col1, col2, col3, col4 = st.columns(4)

                with col1.expander("Player Details"):
                    st.write(f"**Position:** {row.get('Position', 'N/A')}")
                    st.write(f"**Years of Experience:** {row.get('Years of Experience', 'N/A')}")
                    st.write(f"**Agent:** {row.get('Puckpedia Agent', 'N/A')}")

                with col2.expander("Career Health Details"):
                    st.write(f"**Career Health Index:** {row.get('Career Health', 'N/A')}")
                    # Placeholder for detailed data about career health
                    st.write("Detailed career health injuries and analysis.")

                with col3.expander("Seasonal Health Details"):
                    st.write(f"**Seasonal Health Index:** {row.get('Season Health', 'N/A')}")
                    # Placeholder for detailed data about seasonal health
                    st.write("Detailed seasonal health injuries and analysis.")

                with col4.expander("Percent of Reinjury"):
                    st.write(f"**Percent of Reinjury:** {row.get('Percent of Reinjury', 'N/A')}")
                    # Placeholder for detailed data about reinjury probability
                    st.write("Analysis on likelihood of reinjury.")

# Sidebar interaction to select league and team
league_choice = st.sidebar.selectbox('Select a League', ['Select a League', 'NFL', 'MLB', 'NBA', 'NHL'])

if league_choice != 'Select a League':
    team_urls = {
        'NFL': nfl_team_roster_urls,
        'MLB': mlb_team_roster_urls,
        'NBA': nba_team_roster_urls,
        'NHL': nhl_team_roster_urls
    }
    team_choice = st.sidebar.selectbox('Select a Team', ['Select a Team'] + list(team_urls[league_choice].keys()))

    if team_choice != 'Select a Team':
        if league_choice == 'NFL':
            display_nfl_roster(team_choice)
        elif league_choice == 'MLB':
            display_mlb_roster(team_choice)
        elif league_choice == 'NBA':
            display_nba_roster(team_choice)
        elif league_choice == 'NHL':
            display_nhl_roster(team_choice)

def load_data(url):
    #EXAMINE AND REFACTOR CODE
    try:
        data = pd.read_csv(url)
        # Check if the 'Percent of Reinjury' column exists and whether it has NaN values
        if 'Percent of Reinjury' in data.columns:
            if data['Percent of Reinjury'].isnull().any():
                st.warning('Warning: NaN values found in "Percent of Reinjury"')
            return data
        else:
            st.error(f"'Percent of Reinjury' column not found in the data.")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"Failed to load data: {e}")
        return pd.DataFrame()
